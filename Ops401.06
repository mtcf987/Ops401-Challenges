


from cryptography.fernet import Fernet
import os

def generate_key():
    key = Fernet.generate_key()
    with open('key.key', 'wb') as key_file:
        key_file.write(key)
    return key

def load_key():
    return open('key.key', 'rb').read()

def process_file(filepath, key, mode):
    try:
        with open(filepath, 'rb') as file:
            data = file.read()
        fernet = Fernet(key)
        processed_data = fernet.encrypt(data) if mode == 'encrypt' else fernet.decrypt(data)
        with open(filepath, 'wb') as file:
            file.write(processed_data)
        print(f"File {mode}ed successfully.")
    except Exception as e:
        print(f"Error {mode}ing file: {e}")

def process_message(message, key, mode):
    try:
        fernet = Fernet(key)
        if mode == 'encrypt':
            return fernet.encrypt(message.encode())
        else:
            return fernet.decrypt(message.encode().decode('unicode_escape').encode('ISO-8859-1')).decode()
    except Exception as e:
        print(f"Error {mode}ing message: {e}")

def main():
    print("Choose a mode:\n1. Encrypt a file\n2. Decrypt a file\n3. Encrypt a message\n4. Decrypt a message")
    choice = input("Enter your choice (1/2/3/4): ")

    key = generate_key() if choice in ['1', '3'] else load_key()

    if choice in ['1', '2']:
        filepath = input("Enter the file path: ")
        process_file(filepath, key, 'encrypt' if choice == '1' else 'decrypt')
    elif choice in ['3', '4']:
        if choice == '3':
            message = input("Enter the message to encrypt: ")
            encrypted_message = process_message(message, key, 'encrypt')
            print(f"Encrypted message: {encrypted_message}")
        else:
            encrypted_message = input("Enter the encrypted message to decrypt (without b' and '): ")
            print("Decrypted message:", process_message(encrypted_message, key, 'decrypt'))

if __name__ == "__main__":
    main()
