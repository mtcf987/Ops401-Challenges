
#!/usr/bin/env python3

# Author:        Malena Tomlin
# Script:        Event Logging Tool Part 1 of 3
# Date Entered:  6/3/2024
# Purpose:       

import logging
from cryptography.fernet import Fernet

# Configure logging
logging.basicConfig(filename='encryption_tools.log', filemode='a', format='%(asctime)s - %(levelname)s - %(message)s', level=logging.DEBUG)

# Generates a new encryption key using Fernet and saves it to 'key.key'
def generate_key():
    try:
        key = Fernet.generate_key()
        with open('key.key', 'wb') as key_file:
            key_file.write(key)
        logging.info("Key generated and saved successfully.")
        return key
    except Exception as e:
        logging.error(f"Failed to generate or save key: {e}")

# Loads the encryption key from 'key.key'
def load_key():
    try:
        with open('key.key', 'rb') as key_file:
            return key_file.read()
    except FileNotFoundError:
        logging.error("Key file not found.")
        raise
    except Exception as e:
        logging.error(f"Error loading key: {e}")
        raise

# Encrypts a file at filepath with the provided key
def encrypt_file(filepath, key):
    try:
        with open(filepath, 'rb') as file:
            file_data = file.read()
        encrypted_data = Fernet(key).encrypt(file_data)
        with open(filepath, 'wb') as file:
            file.write(encrypted_data)
        logging.info(f"File {filepath} encrypted successfully.")
    except Exception as e:
        logging.error(f"Error encrypting file {filepath}: {e}")

# Decrypts a file at filepath with the provided key
def decrypt_file(filepath, key):
    try:
        with open(filepath, 'rb') as file:
            encrypted_data = file.read()
        decrypted_data = Fernet(key).decrypt(encrypted_data)
        with open(filepath, 'wb') as file:
            file.write(decrypted_data)
        logging.info(f"File {filepath} decrypted successfully.")
    except Exception as e:
        logging.error(f"Error decrypting file {filepath}: {e}")

# Encrypts a message string with the provided key
def encrypt_message(message, key):
    try:
        encrypted_message = Fernet(key).encrypt(message.encode())
        logging.info("Message encrypted successfully.")
        return encrypted_message
    except Exception as e:
        logging.error(f"Error encrypting message: {e}")

# Decrypts an encrypted message string with the provided key
def decrypt_message(encrypted_message, key):
    try:
        decrypted_message = Fernet(key).decrypt(encrypted_message).decode()
        logging.info("Message decrypted successfully.")
        return decrypted_message
    except Exception as e:
        logging.error(f"Error decrypting message: {e}")

# Main program logic
def main():
    logging.info("Program started")
    print("Choose a mode:\n1. Encrypt a file\n2. Decrypt a file\n3. Encrypt a message\n4. Decrypt a message")
    choice = input("Enter your choice (1/2/3/4): ")

    if choice in ['1', '3']:
        key = generate_key()
    elif choice in ['2', '4']:
        key = load_key()

    if choice in ['1', '2']:
        filepath = input("Enter the file path: ")
        if choice == '1':
            encrypt_file(filepath, key)
        elif choice == '2':
            decrypt_file(filepath, key)
    elif choice in ['3', '4']:
        if choice == '3':
            message = input("Enter the message to encrypt: ")
            encrypted_message = encrypt_message(message, key)
            print(f"Encrypted message: {encrypted_message}")
        elif choice == '4':
            encrypted_message = input("Enter the encrypted message to decrypt: ")
            decrypted_message = decrypt_message(encrypted_message, key)
            print(f"Decrypted message: {decrypted_message}")

if __name__ == "__main__":
    main()

# Resources: Used openAI to further define steps and to optimize code.
