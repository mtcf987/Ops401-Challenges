#!/usr/bin/env python3

# Author:     Malena Tomlin
# Script:     Web Application Fingerprinting
# Date:       06/17/2024

import subprocess
import logging
import os

# Configure logging
logging.basicConfig(filename='banner_grabbing.log', level=logging.ERROR, 
                    format='%(asctime)s:%(levelname)s:%(message)s')

def execute_command(command: str) -> str:
    """Execute a shell command and return the output."""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        result.check_returncode()
        return result.stdout
    except subprocess.CalledProcessError as e:
        logging.error(f"Command '{command}' failed with error: {e}")
        return f"Error occurred. Check logs for details."

def banner_grabbing_nc(target: str, port: str) -> str:
    """Perform banner grabbing using netcat."""
    command = f"nc -v {target} {port}"
    return execute_command(command)

def banner_grabbing_telnet(target: str, port: str) -> str:
    """Perform banner grabbing using telnet."""
    telnet_path = os.getenv("TELNET_PATH", "/usr/bin/telnet")
    command = f"{telnet_path} {target} {port}"
    return execute_command(command)

def banner_grabbing_nmap(target: str) -> str:
    """Perform banner grabbing using Nmap."""
    nmap_path = os.getenv("NMAP_PATH", "/usr/bin/nmap")
    command = f"{nmap_path} -Pn -sV --script=banner {target}"
    return execute_command(command)

def main():
    target = input("Enter the target URL or IP address: ")
    port = input("Enter the port number: ")

    # Perform banner grabbing using netcat
    print("\nPerforming banner grabbing using netcat...")
    nc_output = banner_grabbing_nc(target, port)
    print(nc_output)

    # Perform banner grabbing using telnet
    print("\nPerforming banner grabbing using telnet...")
    telnet_output = banner_grabbing_telnet(target, port)
    print(telnet_output)

    # Perform banner grabbing using Nmap
    print("\nPerforming banner grabbing using Nmap...")
    nmap_output = banner_grabbing_nmap(target)
    print(nmap_output)

if __name__ == "__main__":
    main()
